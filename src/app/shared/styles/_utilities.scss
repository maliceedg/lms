@import "colors";

// Spacer variables
$spacer: 1rem;
$spacers: (
  0: 0,
  1: $spacer * 0.25,
  2: $spacer * 0.5,
  3: $spacer,
  4: $spacer * 1.5,
  5: $spacer * 3,
  6: $spacer * 4.5,
);
$enable-negative-margins: false;
$negative-spacers: if($enable-negative-margins, negativify-map($spacers), null);

// Position Variables
$position-values: (
  0: 0,
  50: 50%,
  100: 100%,
);

// Shadow variables
$box-shadow: 0 0.5rem 1rem rgba($black, 0.15);
$box-shadow-sm: 0 0.125rem 0.25rem rgba($black, 0.075);
$box-shadow-lg: 0 1rem 3rem rgba($black, 0.175);
$box-shadow-inset: inset 0 1px 2px rgba($black, 0.075);

// Border bariables
$border-width: 1px;
$border-widths: (
  1: 1px,
  2: 2px,
  3: 3px,
  4: 4px,
  5: 5px,
);
$border-color: $gray-300;
$border-radius: 0.25rem;
$border-radius-sm: 0.2rem;
$border-radius-lg: 0.3rem;
$border-radius-pill: 50rem;
@mixin border-radius($radius: $border-radius, $fallback-border-radius: false) {
  @if $enable-rounded {
    border-radius: valid-radius($radius);
  } @else if $fallback-border-radius != false {
    border-radius: $fallback-border-radius;
  }
}

@mixin border-top-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-end-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-start-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
    border-bottom-left-radius: valid-radius($radius);
  }
}

@mixin border-top-start-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-left-radius: valid-radius($radius);
  }
}

@mixin border-top-end-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-top-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-end-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-bottom-right-radius: valid-radius($radius);
  }
}

@mixin border-bottom-start-radius($radius: $border-radius) {
  @if $enable-rounded {
    border-bottom-left-radius: valid-radius($radius);
  }
}

$utilities: (
  "margin": (
    responsive: true,
    property: margin,
    class: m,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-x": (
    responsive: true,
    property: margin-right margin-left,
    class: mx,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-y": (
    responsive: true,
    property: margin-top margin-bottom,
    class: my,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-top": (
    responsive: true,
    property: margin-top,
    class: mt,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-end": (
    responsive: true,
    property: margin-right,
    class: me,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-bottom": (
    responsive: true,
    property: margin-bottom,
    class: mb,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  "margin-start": (
    responsive: true,
    property: margin-left,
    class: ms,
    values:
      map-merge(
        $spacers,
        (
          auto: auto,
        )
      ),
  ),
  // Negative margin utilities
  "negative-margin":
    (
      responsive: true,
      property: margin,
      class: m,
      values: $negative-spacers,
    ),
  "negative-margin-x": (
    responsive: true,
    property: margin-right margin-left,
    class: mx,
    values: $negative-spacers,
  ),
  "negative-margin-y": (
    responsive: true,
    property: margin-top margin-bottom,
    class: my,
    values: $negative-spacers,
  ),
  "negative-margin-top": (
    responsive: true,
    property: margin-top,
    class: mt,
    values: $negative-spacers,
  ),
  "negative-margin-end": (
    responsive: true,
    property: margin-right,
    class: me,
    values: $negative-spacers,
  ),
  "negative-margin-bottom": (
    responsive: true,
    property: margin-bottom,
    class: mb,
    values: $negative-spacers,
  ),
  "negative-margin-start": (
    responsive: true,
    property: margin-left,
    class: ms,
    values: $negative-spacers,
  ),
  // Padding utilities
  "padding":
    (
      responsive: true,
      property: padding,
      class: p,
      values: $spacers,
    ),
  "padding-x": (
    responsive: true,
    property: padding-right padding-left,
    class: px,
    values: $spacers,
  ),
  "padding-y": (
    responsive: true,
    property: padding-top padding-bottom,
    class: py,
    values: $spacers,
  ),
  "padding-top": (
    responsive: true,
    property: padding-top,
    class: pt,
    values: $spacers,
  ),
  "padding-end": (
    responsive: true,
    property: padding-right,
    class: pe,
    values: $spacers,
  ),
  "padding-bottom": (
    responsive: true,
    property: padding-bottom,
    class: pb,
    values: $spacers,
  ),
  "padding-start": (
    responsive: true,
    property: padding-left,
    class: ps,
    values: $spacers,
  ),
  // Color utilities
  "color":
    (
      property: color,
      class: text,
      values:
        map-merge(
          $theme-colors,
          (
            "white": $white,
            "body": $body-color,
            "muted": $text-muted,
            "black-50": rgba($black, 0.5),
            "white-50": rgba($white, 0.5),
            "reset": inherit,
            "gray": $gray-600,
            "dark-gray": $gray-800,
          )
        ),
    ),
  // Background utilities
  "background-color":
    (
      property: background-color,
      class: bg,
      values:
        map-merge(
          $theme-colors,
          $grays,
          (
            "body": $body-bg,
            "white": $white,
            "transparent": transparent,
          )
        ),
    ),
  // Opacity utilities
  "opacity":
    (
      property: opacity,
      class: opacity,
      state: hover,
      values: (
        0: 0,
        25: 0.25,
        50: 0.5,
        75: 0.75,
        100: 1,
      ),
    ),
  // Visibility utilities
  "visibility":
    (
      property: visibility,
      class: null,
      values: (
        visible: visible,
        invisible: hidden,
      ),
    ),
  // Display utilities
  "display":
    (
      responsive: true,
      print: true,
      property: display,
      class: d,
      values: inline inline-block block grid table table-row table-cell flex inline-flex none,
    ),
  // Float utilities
  "float":
    (
      responsive: true,
      property: float,
      values: (
        start: left,
        end: right,
        none: none,
      ),
    ),
  // Overflow utilities
  "overflow":
    (
      property: overflow,
      values: auto hidden visible scroll,
    ),
  // Flex utilities
  "flex":
    (
      responsive: true,
      property: flex,
      values: (
        fill: 1 1 auto,
      ),
    ),
  "flex-direction": (
    responsive: true,
    property: flex-direction,
    class: flex,
    values: row column row-reverse column-reverse,
  ),
  "flex-grow": (
    responsive: true,
    property: flex-grow,
    class: flex,
    values: (
      grow-0: 0,
      grow-1: 1,
    ),
  ),
  "flex-shrink": (
    responsive: true,
    property: flex-shrink,
    class: flex,
    values: (
      shrink-0: 0,
      shrink-1: 1,
    ),
  ),
  "flex-wrap": (
    responsive: true,
    property: flex-wrap,
    class: flex,
    values: wrap nowrap wrap-reverse,
  ),
  "gap": (
    responsive: true,
    property: gap,
    class: gap,
    values: $spacers,
  ),
  "justify-content": (
    responsive: true,
    property: justify-content,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      between: space-between,
      around: space-around,
      evenly: space-evenly,
    ),
  ),
  "align-items": (
    responsive: true,
    property: align-items,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      baseline: baseline,
      stretch: stretch,
    ),
  ),
  "align-content": (
    responsive: true,
    property: align-content,
    values: (
      start: flex-start,
      end: flex-end,
      center: center,
      between: space-between,
      around: space-around,
      stretch: stretch,
    ),
  ),
  "align-self": (
    responsive: true,
    property: align-self,
    values: (
      auto: auto,
      start: flex-start,
      end: flex-end,
      center: center,
      baseline: baseline,
      stretch: stretch,
    ),
  ),
  "order": (
    responsive: true,
    property: order,
    values: (
      first: -1,
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      last: 6,
    ),
  ),
  // Position utilities
  "position":
    (
      property: position,
      values: static relative absolute fixed sticky,
    ),
  "top": (
    property: top,
    values: $position-values,
  ),
  "bottom": (
    property: bottom,
    values: $position-values,
  ),
  "start": (
    property: left,
    class: start,
    values: $position-values,
  ),
  "end": (
    property: right,
    class: end,
    values: $position-values,
  ),
  "translate-middle": (
    property: transform,
    class: translate-middle,
    values: (
      null: translate(-50%, -50%),
      x: translateX(-50%),
      y: translateY(-50%),
    ),
  ),
  // Shadow utilities
  "shadow":
    (
      property: box-shadow,
      class: shadow,
      values: (
        null: $box-shadow,
        sm: $box-shadow-sm,
        lg: $box-shadow-lg,
        none: none,
      ),
    ),
  // Sizing utilities
  "width":
    (
      property: width,
      class: w,
      values: (
        10: 10%,
        25: 25%,
        30: 30%,
        50: 50%,
        60: 60%,
        75: 75%,
        100: 100%,
        auto: auto,
      ),
    ),
  "max-width": (
    property: max-width,
    class: mw,
    values: (
      100: 100%,
    ),
  ),
  "viewport-width": (
    property: width,
    class: vw,
    values: (
      100: 100vw,
    ),
  ),
  "min-viewport-width": (
    property: min-width,
    class: min-vw,
    values: (
      100: 100vw,
    ),
  ),
  "height": (
    property: height,
    class: h,
    values: (
      25: 25%,
      50: 50%,
      75: 75%,
      100: 100%,
      auto: auto,
    ),
  ),
  "max-height": (
    property: max-height,
    class: mh,
    values: (
      100: 100%,
    ),
  ),
  "viewport-height": (
    property: height,
    class: vh,
    values: (
      100: 100vh,
    ),
  ),
  "min-viewport-height": (
    property: min-height,
    class: min-vh,
    values: (
      100: 100vh,
    ),
  ),
  // Border utilities
  "border":
    (
      property: border,
      values: (
        null: $border-width solid $border-color,
        0: 0,
      ),
    ),
  "border-top": (
    property: border-top,
    values: (
      null: $border-width solid $border-color,
      0: 0,
    ),
  ),
  "border-end": (
    property: border-right,
    class: border-end,
    values: (
      null: $border-width solid $border-color,
      0: 0,
    ),
  ),
  "border-bottom": (
    property: border-bottom,
    values: (
      null: $border-width solid $border-color,
      0: 0,
    ),
  ),
  "border-start": (
    property: border-left,
    class: border-start,
    values: (
      null: $border-width solid $border-color,
      0: 0,
    ),
  ),
  "border-color": (
    property: border-color,
    class: border,
    values:
      map-merge(
        $theme-colors,
        (
          "white": $white,
        )
      ),
  ),
  "border-width": (
    property: border-width,
    class: border,
    values: $border-widths,
  ),
  "rounded": (
    property: border-radius,
    class: rounded,
    values: (
      null: $border-radius,
      0: 0,
      1: $border-radius-sm,
      2: $border-radius,
      3: $border-radius-lg,
      circle: 50%,
      pill: $border-radius-pill,
    ),
  ),
  "rounded-top": (
    property: border-top-left-radius border-top-right-radius,
    class: rounded-top,
    values: (
      null: $border-radius,
    ),
  ),
  "rounded-end": (
    property: border-top-right-radius border-bottom-right-radius,
    class: rounded-end,
    values: (
      null: $border-radius,
    ),
  ),
  "rounded-bottom": (
    property: border-bottom-right-radius border-bottom-left-radius,
    class: rounded-bottom,
    values: (
      null: $border-radius,
    ),
  ),
  "rounded-start": (
    property: border-bottom-left-radius border-top-left-radius,
    class: rounded-start,
    values: (
      null: $border-radius,
    ),
  ),
  // Interaction utilities
  "user-select":
    (
      property: user-select,
      values: all auto none,
    ),
  "pointer-events": (
    property: pointer-events,
    class: pe,
    values: none auto,
  ),
);
